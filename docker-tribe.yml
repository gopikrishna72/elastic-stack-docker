---
version: '3'
services:
  elasticsearch0:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.4.1
    container_name: elasticsearch0
    environment:
      - cluster.name=admin
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # volumes:
    #   - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - esnet

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.4.1
    container_name: elasticsearch2
    environment:
      - cluster.name=admin
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch0"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # volumes:
    #   - esdata2:/usr/share/elasticsearch/data
    ports:
      - 9220:9200
    networks:
      - esnet
    depends_on: ['elasticsearch0']


# 2 "data" nodes send monitoring to admin cluster
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.4.1
    container_name: elasticsearch
    environment:
      - cluster.name=data
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.monitoring.exporters.id1.type=http
      - xpack.monitoring.exporters.id1.host=http://elasticsearch0:9200
      - xpack.monitoring.exporters.id1.auth.username=elastic
      - xpack.monitoring.exporters.id1.auth.password=changeme
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # volumes:
    #   - esdata3:/usr/share/elasticsearch/data
    ports:
      - 9260:9200
    networks:
      - esnet
    # depends_on: ['elasticsearch']

  elasticsearch4:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.4.1
    container_name: elasticsearch4
    environment:
      - cluster.name=data
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch"
      - xpack.monitoring.exporters.id1.type=http
      - xpack.monitoring.exporters.id1.host=http://elasticsearch:9200
      - xpack.monitoring.exporters.id1.auth.username=elastic
      - xpack.monitoring.exporters.id1.auth.password=changeme
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # volumes:
    #   - esdata4:/usr/share/elasticsearch/data
    ports:
      - 9240:9200
    networks:
      - esnet
    depends_on: ['elasticsearch']


# one tribe node
  elasticsearch5:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.4.1
    container_name: elasticsearch5
    environment:
      - cluster.name=tribe
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - tribe.admin.cluster.name=admin
      - tribe.data.cluster.name=data
      - tribe.on_conflict=prefer_admin
      - tribe.admin.discovery.zen.ping.unicast.hosts=elasticsearch0
      - tribe.data.discovery.zen.ping.unicast.hosts=elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # volumes:
    #   - esdata5:/usr/share/elasticsearch/tribe
    ports:
      - 9250:9200
    networks:
      - esnet
    depends_on: ['elasticsearch']




  kibana:
    image: docker.elastic.co/kibana/kibana:${TAG}
    ports: ['127.0.0.1:5601:5601']
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - esnet
    depends_on: ['elasticsearch5']


  logstash:
    image: docker.elastic.co/logstash/logstash:${TAG}
    # Provide a simple pipeline configuration for Logstash with a bind-mounted file.
    # environment:
    #   -
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - esnet
    depends_on: ['elasticsearch5']


  metricbeat:
    image: docker.elastic.co/beats/metricbeat:${TAG}
    # The commented sections below enable Metricbeat to monitor the Docker host,
    # rather than the Metricbeat container. It's problematic with Docker for
    # Windows, however, since "/proc", "/sys" etc. don't exist on Windows.
    # The same likely applies to OSX (needs testing).
    # volumes:
    #   - /proc:/hostfs/proc:ro
    #   - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
    #   - /:/hostfs:ro
    command: metricbeat -e # -system.hostfs=/hostfs
    networks:
      - esnet
    depends_on: ['elasticsearch5']

  packetbeat:
    image: docker.elastic.co/beats/packetbeat:${TAG}
    # Packetbeat needs some elevated privileges to capture network traffic.
    # We'll grant them with POSIX capabilities.
    cap_add: ['NET_RAW', 'NET_ADMIN']
    # Use "host mode" networking to allow Packetbeat to capture traffic from
    # the real network interface on the host, rather than being isolated to the
    # container's virtual interface.
    network_mode: host
    # Since we did that, Packetbeat is not part of the "stack" Docker network
    # that the other containers are connected to, and thus can't resolve the
    # hostname "elasticsearch". Instead, we'll tell it to find Elasticsearch
    # on "localhost", which is the Docker host machine in this context.
    command: packetbeat -v -e -E output.elasticsearch.hosts='["localhost:9200"]'
    depends_on: ['elasticsearch5']


  # Run a short-lived container to set up Kibana index patterns and dashboards.
  configure_kibana:
    # Any Beats image will suffice. We'll use Metricbeat.
    image: docker.elastic.co/beats/metricbeat:${TAG}
    volumes: ['./scripts/configure-kibana.sh:/usr/local/bin/configure-kibana.sh:ro']
    # The script may have CR/LF linefeeds if using Docker for Windows, so make
    # sure that they don't confuse Bash.
    command: ['/bin/bash', '-c', 'cat /usr/local/bin/configure-kibana.sh | tr -d "\r" | bash']
    environment: ['ELASTIC_VERSION=${ELASTIC_VERSION}']
    networks:
      - esnet
    depends_on: ['kibana']



volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local
  esdata3:
    driver: local
  esdata4:
    driver: local
  esdata5:
    driver: local


networks:
  esnet:
